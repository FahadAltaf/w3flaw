@page "/manage"

@inject HttpClient client

<div class="row">
    @if (Show)
    {
        <div class="alert alert-info">
            @Message
        </div>
    }

    <div class="col">
        <input type="text" @bind="Key" class="form-control" />
        <button class="btn btn-primary mt-2 mb-2" @onclick="onAdd">Add</button>
        @if (Keys.Count > 0)
        {
            <div class="table-responsive">
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>
                                Keyword
                            </th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var key in Keys)
                        {
                            <tr>
                                <td>@key.Name</td>
                                <td><a href="javascript:void(0)" @onclick="()=>{onDelete(key.Id).Wait();}">Delete</a></td>
                            </tr>
                        }

                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="alert alert-info">
                No key has been add yet.
            </div>

        }
    </div>
</div>



@code {
    public List<Keys> Keys { get; set; } = new List<Keys>();
    public bool Show { get; set; }
    public string Message { get; set; }
    public string Key { get; set; }
    DataService service = new DataService();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadKeys();
        }
    }

    async Task LoadKeys()
    {
        try
        {
            Keys = await service.GetKeys();
        }
        catch (Exception ex)
        {
            Message = "Error! " + ex.Message;
        }

        StateHasChanged();
    }

    async Task onAdd()
    {
        Show = false;
        try
        {
            if (!string.IsNullOrEmpty(Key))
            {
                await service.CreateKey(Key);
                await LoadKeys();
            }
        }
        catch (Exception ex)
        {
            Show = true;
            Message = "Error! " + ex.Message;
        }

        StateHasChanged();
    }

    async Task onDelete(string id)
    {
        Show = false;
        try
        {
            await service.DeleteKey(id);
            await LoadKeys();
        }
        catch (Exception ex)
        {
            Show = true;
            Message = "Error! " + ex.Message;
        }

        StateHasChanged();

    }
}
